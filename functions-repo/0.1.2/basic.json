[
    {
        "name": "Query OpenAI (ChatGPT) for the the cells A1 to A3",
        "comment": "Query OpenAI (ChatGPT) for the the cells A1 to A3 and writes the OpenAI result to column J.",
        "data": "const runOnCell = async () => {\n  if (this.cell.column === \"A\" && this.cell.row <= 3) {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Authorization\", \"Bearer YOUR_OPENAI_API_KEY\");\n    const raw = JSON.stringify({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        {\n          role: \"user\",\n          content: `Say this is a test on cell  ${this.cellName}`,\n        },\n      ],\n      temperature: 0.7,\n    });\n    const requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n    let oaiRes = await fetch(\n      \"https://api.openai.com/v1/chat/completions\",\n      requestOptions\n    );\n    const json = await oaiRes.json();\n    console.log(\"openai responded\", json);\n    this.util.write(\n      \"J\" + this.cell.row,\n      `openai response: ${json.choices[0]?.message?.content}`,\n      this\n    );\n  } else {\n    this.util.write(this.cellName, this.cellValue, this);\n  }\n  /* all functions must return an object containing the processed workbook and the scratch object */\n  return { workbook: this.workbook };\n};\nrunOnCell().then(result => result);"
    },
    {
        "name": "Create new column",
        "comment": "Create a new cell on column J each time a cell of column A is read.",
        "data": "const runOnCell = async () => {\n  /* https://docs.sheetjs.com/docs/csf/book */\n  const workbook = this.workbook;\n  /* e.g. { row: 15, column: \"A\" } */\n  const cell = this.cell;\n  /* e.g. \"A15\" */\n  const cellName = this.cellName;\n  /* e.g. \"MySheet\" */\n  const sheetName = this.sheetName;\n  /* e.g. \"Hello World!\" */\n  const cellValue = this.cellValue;\n  /*\n   * row count --> range.e.r\n   * column count --> range.e.c\n   * */\n  const range = this.range;\n  console.log(\"Available in your function: \", this);\n  if (cell.column === \"A\") {\n    this.util.write(\"J\" + cell.row, \"sometincool\", this);\n  } else {\n    this.util.write(cellName, cellValue, this);\n  }\n  /* all functions must return an object containing the processed workbook */\n  return { workbook: this.workbook };\n};\nrunOnCell().then(result => result);"
    },
    {
        "name": "Simple HTTP-GET request",
        "comment": "Create a new cell with the content of a HTTP-GET request on column J each time a cell of column A is read.",
        "data": "const runOnCell = async () => {\n  /* https://docs.sheetjs.com/docs/csf/book */\n  const workbook = this.workbook;\n  /* e.g. { row: 15, column: \"A\" } */\n  const cell = this.cell;\n  /* e.g. \"A15\" */\n  const cellName = this.cellName;\n  /* e.g. \"MySheet\" */\n  const sheetName = this.sheetName;\n  /* e.g. \"Hello World!\" */\n  const cellValue = this.cellValue;\n  /*\n   * row count --> range.e.r\n   * column count --> range.e.c\n   * */\n  const range = this.range;\n  console.log(\"Available in your function: \", this);\n  if (cell.column === \"A\") {\n    const response = await fetch(\n      \"https://jsonplaceholder.typicode.com/todos/1\"\n    );\n    const data = await response.json();\n    this.util.write(\"J\" + cell.row, `${cellValue} + ${data.title}`, this);\n  } else {\n    this.util.write(cellName, cellValue, this);\n  }\n  /* all functions must return an object containing the processed workbook */\n  return { workbook: this.workbook };\n};\nrunOnCell().then(result => result);"
    },
    {
        "name": "Cell counter",
        "comment": "Counts all processed cells and writes them to column J.",
        "data": "const runOnCell = async () => {\n  /* https://docs.sheetjs.com/docs/csf/book */\n  const workbook = this.workbook;\n  /* e.g. { row: 15, column: \"A\" } */\n  const cell = this.cell;\n  /* e.g. \"A15\" */\n  const cellName = this.cellName;\n  /* e.g. \"MySheet\" */\n  const sheetName = this.sheetName;\n  /* e.g. \"Hello World!\" */\n  const cellValue = this.cellValue;\n  /*\n   * row count --> range.e.r\n   * column count --> range.e.c\n   * */\n  const range = this.range;\n  /* the scratch object is an \"accumulator\" that stores values between cell processings */\n  this.scratch.counter =\n    this.scratch.counter === undefined ? 0 : this.scratch.counter;\n  this.scratch.counter++;\n  console.log(\"Available in your function: \", this);\n  if (cell.column === \"A\") {\n    this.util.write(\n      \"J\" + cell.row,\n      `cell counter:${this.scratch.counter}`,\n      this\n    );\n  } else {\n    this.util.write(cellName, cellValue, this);\n  }\n  /* all functions must return an object containing the processed workbook and the scratch object */\n  return { workbook: this.workbook, scratch: this.scratch };\n};\nrunOnCell().then(result => result);"
    }
]