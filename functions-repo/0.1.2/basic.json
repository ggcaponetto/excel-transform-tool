[
    {
        "name": "Create new column",
        "comment": "Create a new cell on column J each time a cell of column A is read.",
        "data": "const runOnCell = async () => {\r\n    /* https://docs.sheetjs.com/docs/csf/book */\r\n    const workbook = this.workbook;\r\n    /* e.g. { row: 15, column: \"A\" } */\r\n    const cell = this.cell;\r\n    /* e.g. \"A15\" */\r\n    const cellName = this.cellName;\r\n    /* e.g. \"MySheet\" */\r\n    const sheetName = this.sheetName;\r\n    /* e.g. \"Hello World!\" */\r\n    const cellValue = this.cellValue;\r\n    /*\r\n    * row count --> range.e.r\r\n    * column count --> range.e.c\r\n    * */\r\n    const range = this.range;\r\n    console.log(\"Available in your function: \", this);\r\n    if (cell.column === \"A\") {\r\n        this.util.write(\"J\" + cell.row, \"sometincool\", this)\r\n    } else {\r\n        this.util.write(cellName, cellValue, this)\r\n    }\r\n    /* all functions must return an object containing the processed workbook */\r\n    return {workbook: this.workbook};\r\n};\nrunOnCell().then(result => result);"
    },
    {
        "name": "Simple HTTP-GET request",
        "comment": "Create a new cell with the content of a HTTP-GET request on column J each time a cell of column A is read.",
        "data": "const runOnCell = async () => {\r\n    /* https://docs.sheetjs.com/docs/csf/book */\r\n    const workbook = this.workbook;\r\n    /* e.g. { row: 15, column: \"A\" } */\r\n    const cell = this.cell;\r\n    /* e.g. \"A15\" */\r\n    const cellName = this.cellName;\r\n    /* e.g. \"MySheet\" */\r\n    const sheetName = this.sheetName;\r\n    /* e.g. \"Hello World!\" */\r\n    const cellValue = this.cellValue;\r\n    /*\r\n    * row count --> range.e.r\r\n    * column count --> range.e.c\r\n    * */\r\n    const range = this.range;\r\n    console.log(\"Available in your function: \", this);\r\n    if (cell.column === \"A\") {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\r\n        const data = await response.json();\r\n        this.util.write(\"J\" + cell.row, `${cellValue} + ${data.title}`, this)\r\n    } else {\r\n        this.util.write(cellName, cellValue, this)\r\n    }\r\n    /* all functions must return an object containing the processed workbook */\r\n    return {workbook: this.workbook};\r\n};\nrunOnCell().then(result => result);"
    }
]